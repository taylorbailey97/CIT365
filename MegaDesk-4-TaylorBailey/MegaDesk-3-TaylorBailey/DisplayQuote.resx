<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>